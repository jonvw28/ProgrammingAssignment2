test.set <- dplyr::select(test.set,1:9)
head(test.set)
temp <- vector("numeric", length = nrow(test.set))
test.set <- dplyr::mutate(test.set, Max_prob = temp)
rm(temp)
head(test.set)
?"max,CompressedNormalIRangesList-method"
for (i in 1:as.numeric(nrow(test.set))){
test.set[i,as.numeric(ncol(test,set))] <-
max(test.set[i,5],test.set[i,6],test.set[i,7],test.set[i,8],test.set[i,9])
}
test.set <- dplyr::select(test.set,1:9)
rm(i)
temp <- vector("numeric", length = nrow(test.set))
test.set <- dplyr::mutate(test.set, Max_prob = temp)
rm(temp)
for (i in 1:as.numeric(nrow(test.set))){
test.set[i,as.numeric(ncol(test.set))] <-
max(test.set[i,5],test.set[i,6],test.set[i,7],test.set[i,8],test.set[i,9])
}
rm(i)
head(test.set)
?pmax
test.set <- dplyr::select(test.set,1:9)
head(test.set)
temp <- vector("numeric", length = nrow(test.set))
test.set <- dplyr::mutate(test.set, Max_prob = temp)
rm(temp)
temp.leng <- as.numeric(ncol(test.set))
test.set[,temp.leng] <-
do.call(pmax,test.set[,(temp.leng-5):(temp.leng-1)])
rm(temp.leng)
head(test.set)
test.data[1,which(test.data[1,]==test.data[1,10])]
test.set[1,which(test.set[1,]==test.set[1,10])]
test.set[1,which(test.set[1,5:9]==test.set[1,10])]
temp <- vector("numeric", length = nrow(test.set))
test.set <- dplyr::mutate(test.set, Test_Class = temp)
rm(temp)
head(test.set)
test.set[,as.numeric(ncol(test.set))] <-test.set[,which(test.set[,5:9]==test.set[,10])]
test.set[,as.numeric(ncol(test.set))] <- which(test.set[,5:9]==test.set[,10])
head(test.set)
test.set <- dplyr::select(test.set,1:10)
Class_1 = Prob_Class_1 == Max_prob)
test.set <- dplyr::mutate(test.set,
Class_1 = Prob_Class_1 == Max_prob)
head(test.set)
test.set <- dplyr::select(test.set,1:10)
test.set <- dplyr::mutate(test.set,
Class_1 = Prob_Class_1 == Max_prob,
Class_2 = Prob_Class_2 == Max_prob,
Class_3 = Prob_Class_3 == Max_prob,
Class_4 = Prob_Class_4 == Max_prob,
Class_5 = Prob_Class_5 == Max_prob
)
head(test.set)
temp <- vector("numeric", length = nrow(test.set))
test.set <- dplyr::mutate(test.set, Test_Class = temp)
rm(temp)
head(test.set)
test.set[which(test.set[temp.length - 5,]),temp.length] <- 1
temp.length <- as.numeric(ncol(test.set))
test.set[which(test.set[temp.length - 5,]),temp.length] <- 1
test.set[which(test.set[temp.length - 5,]),temp.length] <- 1
test.set[(test.set[,temp.length-5]),temp.length] <- 1
head(test.set)
test.set[(test.set[,temp.length-5]),temp.length] <- 1
test.set[(test.set[,temp.length-4]),temp.length] <- 2
test.set[(test.set[,temp.length-3]),temp.length] <- 3
test.set[(test.set[,temp.length-2]),temp.length] <- 4
test.set[(test.set[,temp.length-1]),temp.length] <- 5
head(test.set)
table(test.set$Test_Class)
test.set <- dplyr::mutate(test.set,
COrrect = Test_Class == Actual_Class)
head(test.set)
table(test.set$COrrect)
test.5 <- dplyr::filter(test.set, Actual_Class == 5)
table(test.5$COrrect)
test.false.5 <- dplyr::filter(test.set, Test_Class == 5)
table(test.false.5$COrrect)
my.classes <- stats::quantile(At_tiles.data$Relative_Meth, probs = seq(0,1,0.2),na.rm = TRUE)
All.1 <- dplyr::filter(At_tiles.data, Relative_Meth <= my.classes[2])
All.2 <- dplyr::filter(At_tiles.data, Relative_Meth > my.classes[2] & Relative_Meth <= my.classes[3])
All.3 <- dplyr::filter(At_tiles.data, Relative_Meth > my.classes[3] & Relative_Meth <= my.classes[4])
All.4 <- dplyr::filter(At_tiles.data, Relative_Meth > my.classes[4] & Relative_Meth <= my.classes[5])
All.5 <- dplyr::filter(At_tiles.data, Relative_Meth > my.classes[5] & Relative_Meth <= my.classes[6])
hist(All.1$cytosinesCountCG, ylim = c(0,0.1), xlim = c(0,100),freq = FALSE,breaks=my.breaks, col = cols[1],main = "Histogram of All CpG Content 0-20 percentile",xlab = "CpG Content")
All.1.neg.bin <- MASS::fitdistr(All.1$cytosinesCountCG,"negative binomial")
All.2.neg.bin <- MASS::fitdistr(All.2$cytosinesCountCG,"negative binomial")
All.3.neg.bin <- MASS::fitdistr(All.3$cytosinesCountCG,"negative binomial")
All.4.neg.bin <- MASS::fitdistr(All.4$cytosinesCountCG,"negative binomial")
All.5.neg.bin <- MASS::fitdistr(All.5$cytosinesCountCG,"negative binomial")
my.breaks <- seq(0,80,2)
cols <-  adjustcolor(rainbow(5), alpha.f=0.3)
#
hist(All.1$cytosinesCountCG, ylim = c(0,0.1), xlim = c(0,100),freq = FALSE,breaks=my.breaks, col = cols[1],main = "Histogram of All CpG Content 0-20 percentile",xlab = "CpG Content")
curve(dnbinom(x, size = All.1.neg.bin$estimate[1], mu = All.1.neg.bin$estimate[2] ), add=TRUE)
curve(dnbinom(x, size = All.2.neg.bin$estimate[1], mu = All.2.neg.bin$estimate[2] ), add=TRUE)
curve(dnbinom(x, size = All.3.neg.bin$estimate[1], mu = All.3.neg.bin$estimate[2] ), add=TRUE)
curve(dnbinom(x, size = All.4.neg.bin$estimate[1], mu = All.4.neg.bin$estimate[2] ), add=TRUE)
curve(dnbinom(x, size = All.5.neg.bin$estimate[1], mu = All.5.neg.bin$estimate[2] ), add=TRUE)
load("~/At_tiles_2_12_15.RData")
plot(x=model.data[,1],y=model.data[,2],pch=16,cex=0.1)
model.data <- dplyr::filter(At_tiles.data, is.na(Relative_Meth) == FALSE) %>%
dplyr::select(cytosinesCountCG,Relative_Meth)
plot(x=model.data[,1],y=model.data[,2],pch=16,cex=0.1)
summary(model.data$Relative_Meth)
model.data <- dplyr::filter(At_tiles.data, is.na(Relative_Meth) == FALSE) %>%
dplyr::select(cytosinesCountCG,Relative_Meth) %>%
dplyr::filter(Relative_Meth < 5)
plot(x=model.data[,1],y=model.data[,2],pch=16,cex=0.1)
model.data <- dplyr::filter(At_tiles.data, is.na(Relative_Meth) == FALSE) %>%
dplyr::select(cytosinesCountCG,Relative_Meth) %>%
dplyr::filter(Relative_Meth < 1)
plot(x=model.data[,1],y=model.data[,2],pch=16,cex=0.1)
model.data <- dplyr::filter(At_tiles.data, is.na(Relative_Meth) == FALSE) %>%
dplyr::select(cytosinesCountCG,Relative_Meth) %>%
dplyr::filter(Relative_Meth < 5)
CpG.10 <- dplyr::filter(model.data,cytosinesCountCG <=10)
CpG.20 <- dplyr::filter(model.data, cytosinesCountCG >10 & cytosinesCountCG <=20)
CpG.30 <- dplyr::filter(model.data, cytosinesCountCG >20 & cytosinesCountCG <=30)
CpG.40 <- dplyr::filter(model.data, cytosinesCountCG >30 & cytosinesCountCG <=40)
CpG.50 <- dplyr::filter(model.data, cytosinesCountCG >40 & cytosinesCountCG <=50)
CpG.60 <- dplyr::filter(model.data, cytosinesCountCG >50 & cytosinesCountCG <=60)
CpG.70 <- dplyr::filter(model.data, cytosinesCountCG >60 & cytosinesCountCG <=70)
CpG.80 <- dplyr::filter(model.data, cytosinesCountCG >70)
hist(CpG.10$Relative_Meth, ylim = c(0,0.1),freq = FALSE,breaks=my.breaks, col = cols[1],main = "Histogram of Met 1-1 vs WT CpG Methylation for CpG count <= 10",xlab = "Relative Methylation (Met 1-1 v WT)")
cols <-  adjustcolor(rainbow(8), alpha.f=0.3)
hist(CpG.10$Relative_Meth, ylim = c(0,0.1),freq = FALSE, col = cols[1],main = "Histogram of Met 1-1 vs WT CpG Methylation for CpG count <= 10",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.10$Relative_Meth, ylim = c(0,0.25), xlim = c(0,5),freq = FALSE, col = cols[1],main = "Histogram of Met 1-1 vs WT CpG Methylation for CpG count <= 10",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.10$Relative_Meth, ylim = c(0,0.5), xlim = c(0,5),freq = FALSE, col = cols[1],main = "Histogram of Met 1-1 vs WT CpG Methylation for CpG count <= 10",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.10$Relative_Meth, ylim = c(0,1), xlim = c(0,5),freq = FALSE, col = cols[1],main = "Histogram of Met 1-1 vs WT CpG Methylation for CpG count <= 10",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.10$Relative_Meth, ylim = c(0,2), xlim = c(0,5),freq = FALSE, col = cols[1],main = "Histogram of Met 1-1 vs WT CpG Methylation for CpG count <= 10",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.10$Relative_Meth, ylim = c(0,5), xlim = c(0,5),freq = FALSE, col = cols[1],main = "Histogram of Met 1-1 vs WT CpG Methylation for CpG count <= 10",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.10$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[1],main = "Histogram of Met 1-1 vs WT CpG Methylation for CpG count <= 10",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.20$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[2],main = "Histogram of Met 1-1 vs WT CpG Methylation for 10< CpG count <= 20 ",xlab = "Relative Methylation (Met 1-1 v WT)")
par(mfrow = n2mfrow(8))
hist(CpG.10$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[1],main = "Histogram of Met 1-1 vs WT CpG Methylation for CpG count <= 10",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.20$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[2],main = "Histogram of Met 1-1 vs WT CpG Methylation for 10< CpG count <= 20 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.30$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[3],main = "Histogram of Met 1-1 vs WT CpG Methylation for 20< CpG count <= 30 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.40$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[4],main = "Histogram of Met 1-1 vs WT CpG Methylation for 30< CpG count <= 40 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.50$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[5],main = "Histogram of Met 1-1 vs WT CpG Methylation for 40< CpG count <= 50 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.60$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[6],main = "Histogram of Met 1-1 vs WT CpG Methylation for 50< CpG count <= 60 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.70$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[7],main = "Histogram of Met 1-1 vs WT CpG Methylation for 60< CpG count <= 70 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.80$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[8],main = "Histogram of Met 1-1 vs WT CpG Methylation for 70< CpG count",xlab = "Relative Methylation (Met 1-1 v WT)")
par(mfrow = n2mfrow(8))
hist(CpG.10$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[1],main = "Histogram of Met 1-1 vs WT CpG Methylation for CpG count <= 10",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.20$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[2],main = "Histogram of Met 1-1 vs WT CpG Methylation for 10< CpG count <= 20 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.30$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[3],main = "Histogram of Met 1-1 vs WT CpG Methylation for 20< CpG count <= 30 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.40$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[4],main = "Histogram of Met 1-1 vs WT CpG Methylation for 30< CpG count <= 40 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.50$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[5],main = "Histogram of Met 1-1 vs WT CpG Methylation for 40< CpG count <= 50 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.60$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[6],main = "Histogram of Met 1-1 vs WT CpG Methylation for 50< CpG count <= 60 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.70$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[7],main = "Histogram of Met 1-1 vs WT CpG Methylation for 60< CpG count <= 70 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.80$Relative_Meth, ylim = c(0,3), xlim = c(0,5),freq = FALSE, col = cols[8],main = "Histogram of Met 1-1 vs WT CpG Methylation for 70< CpG count",xlab = "Relative Methylation (Met 1-1 v WT)")
breaks <- seq(0,5,0.2)
par(mfrow = n2mfrow(8))
hist(CpG.10$Relative_Meth, ylim = c(0,3), xlim = c(0,5),breaks=breaks,freq = FALSE, col = cols[1],main = "Histogram of Met 1-1 vs WT CpG Methylation for CpG count <= 10",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.20$Relative_Meth, ylim = c(0,3), xlim = c(0,5),breaks=breaks,freq = FALSE, col = cols[2],main = "Histogram of Met 1-1 vs WT CpG Methylation for 10< CpG count <= 20 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.30$Relative_Meth, ylim = c(0,3), xlim = c(0,5),breaks=breaks,freq = FALSE, col = cols[3],main = "Histogram of Met 1-1 vs WT CpG Methylation for 20< CpG count <= 30 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.40$Relative_Meth, ylim = c(0,3), xlim = c(0,5),breaks=breaks,freq = FALSE, col = cols[4],main = "Histogram of Met 1-1 vs WT CpG Methylation for 30< CpG count <= 40 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.50$Relative_Meth, ylim = c(0,3), xlim = c(0,5),breaks=breaks,freq = FALSE, col = cols[5],main = "Histogram of Met 1-1 vs WT CpG Methylation for 40< CpG count <= 50 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.60$Relative_Meth, ylim = c(0,3), xlim = c(0,5),breaks=breaks,freq = FALSE, col = cols[6],main = "Histogram of Met 1-1 vs WT CpG Methylation for 50< CpG count <= 60 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.70$Relative_Meth, ylim = c(0,3), xlim = c(0,5),breaks=breaks,freq = FALSE, col = cols[7],main = "Histogram of Met 1-1 vs WT CpG Methylation for 60< CpG count <= 70 ",xlab = "Relative Methylation (Met 1-1 v WT)")
hist(CpG.80$Relative_Meth, ylim = c(0,3), xlim = c(0,5),breaks=breaks,freq = FALSE, col = cols[8],main = "Histogram of Met 1-1 vs WT CpG Methylation for 70< CpG count",xlab = "Relative Methylation (Met 1-1 v WT)")
?lm
reg.model <- lm(Relative_Meth ~ cytosinesCountCG,model.data)
reg.model
reg.model$residuals
reg.model$coefficients
plot(x=model.data[,1],y=model.data[,2],pch=16,cex=0.1)
abline(coef=reg.model$coefficients,col="red")
?cor
cor(model.data[,1],model.data[,2])
summary(reg.model)
x <- 4
class(x)
x <- c(4,TRUE)
class(x)
?c()
x <- c(1,3,5)
y <- c(3,2,10)
z <- cbind(x,y)
class(z)
z
x <- list(2,"a","b",TRUE)
x[[2]]
class(x)
class(x[[2]])
x <- 1:4
y <2:3
y <- 2:3
x+y
z <- x+y
class(z)
x <- c(3,5,1,10,12,6)
x[x %in% 1:5] <- 0
x
load("~/Coursera/Data Science Specialisation/rprog-data-quiz1_data/hw1_data.csv")
read.csv("~/Coursera/Data Science Specialisation/rprog-data-quiz1_data/hw1_data.csv")
data <- read.csv("~/Coursera/Data Science Specialisation/rprog-data-quiz1_data/hw1_data.csv")
colnames(data)
data[1:2,]
data[152:153,]
last(data,2)
end(data,2)
?bottom
?head
tail(data,2)
data[47,]
summary(data[,1])
?mean
mean(data[,1],na.rm = TRUE)
q18.1 <- data[which(data[,1]>31),]
colnames(data)
q18 <- q18.1[which(q18.1[,4]>90),]
q18
mean(q18[,2])
q19 <- data[which(data[,5]==6),]
q19
mean(q19[,4])
q20 <- data[which(data[,5]==5),]
q20
max(q20[,1])
max(q20[,1],na,rm = T)
max(q20[,1],na.rm = T)
x <- list(2,"a","b",TRUE)
x[[1]]
class(x[[1]])
x <- 1:4
y<-2
x+y
head(data)
tail(data)
data[47,]
summary(data[,1])
mean(data[,1],na.rm=T)
mean(q18[,2])
q19
mean(q19[,4])
install.packages("KernSmooth")
library(KernSmooth)
?KernSmooth
??KernSmooth
?kernapply
?kernel
install.packages("Rtools")
install.packages("devtools")
rtools()
library(devtools)
rtools()
find_rtools
find_rtools()
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls
ls()
dir()
?list.files
args(lits.files())
args(list.files())
args(list.files
)
old.dir <- getwd()
dir.create()
dir.create(test.dir)
dir.create("test.dir")
info()
dir.create("testdir")
setwd(testdir)
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","tesdir3"))
dir.create(file.path("testdir2","testdir3"),recursive = T)
dir.create(file.path("testdir2","testdir3"),recursive = TRUE)
unlink("testdir2",recursive = TRUE)
setwd(old.dir)
unlink("testdir",recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse =" ")
my_name <- c(my_char, "Jon")
my_name
paste(my_char, collapse = " ")
paste(my_name, collapse = " ")
paste("Hello","world",sep=" ")
paste("Hello","world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4, sep = "-")
x <- c(44,NA,5,NA)
x*3
y <-rnorm(1000)
z <- rep(NA,1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf -Inf
cube <- function(x,n) {
x^3
}
cube(3)
f <- function(x){
g<-function(y){
y + z
}
z <- 4
x +g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 1:10
if(x > 5) {
x <- 0
}
library(datasets)
data("iris")
head(iris)
sapply(split(iris$Sepal.Length,iris$Species),mean)
iris
mean(iris[101:150,1])
?tapply
?with
data(mtcars)
sapply(split(mtcars$hp,mtcars$cyl),mean)
x <- sapply(split(mtcars$hp,mtcars$cyl),mean)
x[3]-x[1]
setwd("~/MOOC/Coursera/Data Science Specialisation/R Programming/R Work/Programming Task 2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x <- rep(c(1,2),5)
makeVector(x)
test <- makeVector(x)
test
test$sgetmean
test$setmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(test)
setwd("~/ProgrammingAssignment2")
?`<<-`
?solve
?`<<-`
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
matrix.data <- x$get()
i <- solve(matrix.data,...)
i
}
x <- 1:9
dim(x) <- c(3,3)
x
makeCacheMatrix(x)
test <- makeCacheMatrix(x)
cacheSolve(test)
x <- runif(9)
dim(x) <- c(3,3)
x
test <- makeCacheMatrix(x)
cacheSolve(test)
y <- cacheSolve(test)
x*y
x.*y
x%*%y
cacheSolve(test)
cacheSolve(test)
test <- makeCacheMatrix(x)
cacheSolve(test)
test
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)){
message("getting cached data")
return(i)
}
matrix.data <- x$get()
i <- solve(matrix.data,...)
i
}
x <- runif(16)
dim(x) <- c(4,4)
test <- makeCacheMatrix(x)
test$getinverse()
cacheSolve(test)
test$setinverse(cacheSolve(test))
test$getinverse()
test$get()
test$get()%*%test$getinverse()
cacheSolve(test)
cacheSolve(test)
x <- runif(25)
dim(x) <-c(5,5)
test$set(x)
test$get()
test
